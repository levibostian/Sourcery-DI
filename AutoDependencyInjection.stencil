// swiftlint:disable line_length
// swiftlint:disable variable_name
// swiftlint:disable force_cast

// File generated from Sourcery-DI project: https://github.com/levibostian/Sourcery-DI
// Template version 0.1.1

import Foundation
#if os(iOS) || os(tvOS) || os(watchOS)
import UIKit
#elseif os(OSX)
import AppKit
#endif

{# enum that contains list of all dependencies in our app. This allows automated unit testing against our dependency graph. #}
enum Dependency: CaseIterable {
    {# types.all to support classes, enums, structs, custom injecting, etc. #}
    {% for dep in types.all where dep|annotated:"InjectRegister" %}
    case {{ dep.annotations["InjectRegister"]|lowerFirstLetter }}
    {% endfor %}
}

{# When an InjectCustom exists, we don't want it to be responsible for returning an override. This function exists for all injectors to get overriden property before calling the base #}
{% macro overrideGetterProperty class %}
private var _{{ class|lowerFirstLetter }}: {{ class }} {    
    if let overridenDep = self.overrides[.{{ class|lowerFirstLetter }}] {
        return overridenDep as! {{ class }}
    }
    return self.{{ class|lowerFirstLetter }}
}
{% endmacro %}

class DI {
    {# Singleton DI graph #}
    static var shared: DI = DI()
    {# Override a dependency. Used in testing, only #}
    private var overrides: [Dependency: Any] = [:]
    
    private init() {
    }

    /**
    Designed to be used only for testing purposes to override dependencies. 
    */
    func override<Value: Any>(_ dep: Dependency, value: Value, forType type: Value.Type) {
        overrides[dep] = value 
    }

    /**
    Reset overrides. Meant to be used in `tearDown()` of tests. 
    */
    func resetOverrides() {        
        overrides = [:]
    }

    /**
    Use this generic method of getting a dependency, if you wish. 
    */
    func inject<T>(_ dep: Dependency) -> T {                            
        switch dep {
            {% for dep in types.all where dep|annotated:"InjectRegister" %}
            case .{{ dep.annotations["InjectRegister"]|lowerFirstLetter }}: return self._{{ dep.annotations["InjectRegister"]|lowerFirstLetter }} as! T 
            {% endfor %}                
        }
    }

    /**
    Use the property accessors below to inject pre-typed dependencies. 
    */

    {# below, types.class used to be used but typealiases would not be included. if things break, need to fix that. #}
    {% for dep in types.all where dep|annotated:"InjectRegister" %}
    {% set class %}{{ dep.annotations["InjectRegister"] }}{% endset %}
    
    {% if dep|annotated:"InjectCustom" %}
    // {{ class }} (custom. property getter provided via extension)
    {% call overrideGetterProperty class %}
    {% elif dep|annotated:"InjectSingleton" %}    
    // {{ class }} (singleton)
    {% call overrideGetterProperty class %}
    {# Use a DispatchQueue to make singleton thread safe #}
    private let _{{ class|lowerFirstLetter }}_queue = DispatchQueue(label: "DI_get_{{ class|lowerFirstLetter }}_queue")
    private var _{{ class|lowerFirstLetter }}_shared: {{ class }}?
    var {{ class|lowerFirstLetter }}: {{ class }} {
        return _{{ class|lowerFirstLetter }}_queue.sync {
            if let overridenDep = self.overrides[.{{ class|lowerFirstLetter }}] {
                return overridenDep as! {{ class }}
            }
            let res = _{{ class|lowerFirstLetter }}_shared ?? _get_{{ class|lowerFirstLetter }}()
            _{{ class|lowerFirstLetter }}_shared = res
            return res
        }
    }
    private func _get_{{ class|lowerFirstLetter }}() -> {{ class }} {
        return {{ dep.name }}({% for initializer in dep.initializers %}{% if not initializer.isConvenienceInitializer %}{% for param in initializer.parameters %}{{ param.name }}: self._{{ param.typeName|lowerFirstLetter }}{% if not forloop.last%}, {% endif %}{% endfor %}{% endif %}{% endfor %})
    }
    {% else %}
    // {{ class }}
    {% call overrideGetterProperty class %}
    var {{ class|lowerFirstLetter }}: {{ class }} {    
        return {{ dep.name}}({% for initializer in dep.initializers %}{% if not initializer.isConvenienceInitializer %}{% for param in initializer.parameters %}{{ param.name }}: self._{{ param.typeName|lowerFirstLetter }}{% if not forloop.last%}, {% endif %}{% endfor %}{% endif %}{% endfor %})
    }
    {% endif %}
    {% endfor %} 
}